[
  {
    "objectID": "dataviz.html",
    "href": "dataviz.html",
    "title": "Data Viz",
    "section": "",
    "text": "Visuals created from TidyTuesday data are on this page. Feel free to look around :)",
    "crumbs": [
      "Data Viz"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Veronica De Leon",
    "section": "",
    "text": "Hi! I’m Veronica (she/her) and welcome to my website. I love math and am currently getting into data science. More about me and my site on the ‘About’ page."
  },
  {
    "objectID": "tidytues2.html",
    "href": "tidytues2.html",
    "title": "Chocolate Rating",
    "section": "",
    "text": "The link to the original data is here\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(\"tidytuesdayR\")\nlibrary(dplyr)\ntuesdata &lt;- tidytuesdayR::tt_load('2022-01-18')\n\n\n\n\nShow the code\nchocolates &lt;- tuesdata$chocolate |&gt;\n  select(cocoa_percent, rating) |&gt;\n  group_by(cocoa_percent) |&gt;\n  summarize(avg_rating = mean(rating), na.rm = TRUE) |&gt;\n  \n  filter(cocoa_percent &gt;= \"75%\")\n\n\n\n\nShow the code\nchocolates |&gt;\n  ggplot(aes(cocoa_percent, avg_rating)) +\n  geom_point(color = \"brown\", alpha = 0.5, size = 3) +\n  labs(\n    x = \"Cocoa Percent\",\n    y = \"Average Chocolate Rating\", \n    title = \"Chocolate Rating by Cocoa Percent\"\n  ) +\n  theme_minimal()",
    "crumbs": [
      "Chocolate Rating"
    ]
  },
  {
    "objectID": "tidytues1.html",
    "href": "tidytues1.html",
    "title": "Carbon Majors Emissions",
    "section": "",
    "text": "The link to the original data is here\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(\"tidytuesdayR\")\nlibrary(dplyr)\ntuesdata &lt;- tidytuesdayR::tt_load('2024-05-21')\n\n\n\n\nShow the code\nemit_co2 &lt;- tuesdata$emissions\nggplot(emit_co2, aes(x = year, y = total_emissions_MtCO2e, color = commodity)) +\n  geom_point(alpha = 0.2) +\n  facet_wrap(~ commodity) +\n  labs(\n    x = \"Year\",\n    y = \"Total CO2 Emissions\",\n    title = \"Total Emissions per Commodity per Year\",\n    color = \"Commodity\"\n  ) +\n  theme_minimal ()",
    "crumbs": [
      "Carbon Majors Emissions"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Veronica De Leon",
    "section": "",
    "text": "About Author\nI was born in the Philippines but I’ve been living in Los Angeles since I was nine (the building pictured is in Downtown LA). I’m currently studying at Pomona College for mathematics and statistics. I love crafting, specifically knitting and sewing (the image on my home page is a design that I sewed onto a shirt).\n\n\nAbout this site\nThis site currently contains projects for my Foundations of Data Science DS002 class."
  },
  {
    "objectID": "miniproj_2.html",
    "href": "miniproj_2.html",
    "title": "miniproj_2",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.1     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.1\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(ggplot2)\nlibrary(stringr)\n\n\nnetflix &lt;- read.csv(\"../veronica-2222.github.io/netflix_titles.csv\")\n\n\n# Which Comedy TV shows were added on netflix on 2021\nshows &lt;- netflix |&gt;\n  select(type, duration, title, date_added, listed_in) |&gt;\n  group_by(type) |&gt;\n  filter(str_detect(type, \"TV Show\")) |&gt;\n  filter(str_detect(date_added , \"2021\")) |&gt;\n  filter(str_detect(listed_in, \"Comedies\")) |&gt;\n  mutate(season = str_sub(duration, 1, 1)) |&gt; \n  summarize(type, title, season)\n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'type'. You can override using the\n`.groups` argument.\n\nshows\n\n# A tibble: 118 × 3\n# Groups:   type [1]\n   type    title                 season\n   &lt;chr&gt;   &lt;chr&gt;                 &lt;chr&gt; \n 1 TV Show Kota Factory          2     \n 2 TV Show Dear White People     4     \n 3 TV Show Chicago Party Aunt    1     \n 4 TV Show Sex Education         3     \n 5 TV Show Angry Birds           1     \n 6 TV Show The Smart Money Woman 1     \n 7 TV Show Saved by the Bell     9     \n 8 TV Show Lucifer               6     \n 9 TV Show Kid Cosmic            2     \n10 TV Show On the Verge          1     \n# ℹ 108 more rows\n\n\n\nshows |&gt;\n  ggplot(aes(y = season)) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n#International Shows/Movies\ninternational &lt;- netflix |&gt;\n  select(type, title, country, listed_in) |&gt;\n  group_by(country) |&gt;\n  filter(str_detect(listed_in, \"International\")) |&gt;\n  summarize(type, title, country, listed_in) \n\nWarning: Returning more (or less) than 1 row per `summarise()` group was deprecated in\ndplyr 1.1.0.\nℹ Please use `reframe()` instead.\nℹ When switching from `summarise()` to `reframe()`, remember that `reframe()`\n  always returns an ungrouped data frame and adjust accordingly.\n\n\n`summarise()` has grouped output by 'country'. You can override using the\n`.groups` argument.\n\ninternational\n\n# A tibble: 4,103 × 4\n# Groups:   country [448]\n   country type    title                                               listed_in\n   &lt;chr&gt;   &lt;chr&gt;   &lt;chr&gt;                                               &lt;chr&gt;    \n 1 \"\"      TV Show Ganglands                                           Crime TV…\n 2 \"\"      TV Show Vendetta: Truth, Lies and The Mafia                 Crime TV…\n 3 \"\"      TV Show Bangkok Breaking                                    Crime TV…\n 4 \"\"      Movie   Europe's Most Dangerous Man: Otto Skorzeny in Spain Document…\n 5 \"\"      TV Show Jaguar                                              Internat…\n 6 \"\"      TV Show Monsters Inside: The 24 Faces of Billy Milligan     Crime TV…\n 7 \"\"      Movie   Avvai Shanmughi                                     Comedies…\n 8 \"\"      Movie   Minsara Kanavu                                      Comedies…\n 9 \"\"      Movie   Ankahi Kahaniya                                     Dramas, …\n10 \"\"      TV Show Squid Game                                          Internat…\n# ℹ 4,093 more rows\n\n\n\ninternational_over_fifty &lt;- international |&gt;\n  select(title, type, country, listed_in) |&gt;\n  group_by(country) |&gt;\n  summarize(count = n()) |&gt;\n  filter(count &gt;= 50) |&gt;\n  arrange(desc(count))\n\ninternational_over_fifty \n\n# A tibble: 19 × 2\n   country          count\n   &lt;chr&gt;            &lt;int&gt;\n 1 \"India\"            882\n 2 \"\"                 432\n 3 \"Japan\"            199\n 4 \"South Korea\"      187\n 5 \"United Kingdom\"   178\n 6 \"Spain\"            136\n 7 \"Egypt\"            103\n 8 \"Turkey\"           103\n 9 \"France\"           100\n10 \"Nigeria\"           90\n11 \"Mexico\"            84\n12 \"Taiwan\"            80\n13 \"Indonesia\"         75\n14 \"Philippines\"       74\n15 \"China\"             63\n16 \"Thailand\"          61\n17 \"Brazil\"            58\n18 \"Germany\"           55\n19 \"Hong Kong\"         52\n\n\n\ninternational_over_fifty &lt;- international |&gt;\n  select(title, type, country, listed_in) |&gt;\n  group_by(country) |&gt;\n  mutate(count = n()) |&gt;\n  filter(count &gt;= 50) |&gt;\n  arrange(desc(count))\n\ninternational_over_fifty |&gt;\n  ggplot(aes(y = fct_reorder(country, count))) +\n  geom_bar()\n\n\n\n\n\n\n\n\n\n# Release year vs date added on Netflix\nnetflix |&gt;\n  select(release_year, date_added) |&gt;\n  mutate(added_year = str_extract(date_added, \"(?&lt;=, ).+(?=$)\")) |&gt;\n  ggplot(aes(x = release_year, y = added_year)) +\n  geom_point()\n\n\n\n\n\n\n\n\n\n\n\n# table of Titles and type together in one string of movies/tv shows added on netflix on christmas eve\n\n  netflix |&gt;\n  select(title, type, date_added) |&gt;\n  mutate(movieinfo =  str_c(title, type, sep=': ')) |&gt;\n  mutate(first_date = str_extract(date_added, \".+(?=,)\")) |&gt;\n    filter(first_date == \"December 24\") |&gt;\n    select(movieinfo, first_date)\n\n                                     movieinfo  first_date\n1                            Bridezilla: Movie December 24\n2                       Cemara's Family: Movie December 24\n3                  Hello, Love, Goodbye: Movie December 24\n4                    CAROLE & TUESDAY: TV Show December 24\n5                  Como caído del cielo: Movie December 24\n6   John Mulaney & The Sack Lunch Bunch: Movie December 24\n7                       Lost in Space: TV Show December 24\n8 Stand Up and Away! with Brian Regan: TV Show December 24\n9                  Way Back into Love: TV Show December 24\n\n\n\n# rating vs. listed_in (but only take first category it's listed in) -- need to use regular expression to only get the thing after TV- and to only get first category in listed in\n\nnetflix|&gt;\n  select(rating, listed_in) |&gt;\n  mutate(tv_rating = str_extract(rating, \"(?&lt;=-).+(?=$)\")) |&gt;\n  mutate(first_listed = str_extract(listed_in, \"\\\\w+\")) |&gt;\n  filter(first_listed %in% c(\"Action\", \"Crime\", \"Dramas\", \"Comedies\")) |&gt;\n  ggplot(aes(x = tv_rating, color = first_listed)) +\n  geom_bar() \n\n\n\n\n\n\n\n#groupby count of tv_ratings\n#filter action, comedies, crime, dramas"
  }
]